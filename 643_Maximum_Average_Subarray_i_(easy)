# Solved on May 23, 2023
"""
You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. 
Any answer with a calculation error less than 10^-5 will be accepted.
"""

from typing import List




class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:

        # Base Case - When list has 1 item
        if len(nums) <= 1:
            return nums[0]/k
        
        # Define window size
        left, right = 0, k -1
        
        # First window
        sum = 0
        for item in range(0, k):
            sum += nums[item]
        max = sum
        
        # Next window
        for item in range(0, len(nums) - k):
            sum -= nums[left]
            left += 1
            right += 1
            sum += nums[right]
            if sum > max:
                max = sum
        return max/k
  

# Begin Test
num_list = [3, 3, 4, 3, 0]
k = 4

my_solution = Solution()
print(my_solution.findMaxAverage(num_list, k))
# End Test

# Notes (a faster approach below)
# class Solution:
#     def findMaxAverage(self, nums: List[int], k: int) -> float:
#         best = now = sum(nums[:k])
#         for i in range(k, len(nums)):
#             now += nums[i] - nums[i-k]
#             if now > best:
#                 best = now
#         return best/k