# Solved in 57 mins on 5/24/2023
"""
Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.
"""


from typing import List




class Solution:
    def pivotIndex(self, nums: List[int]) -> int:
        if len(nums) <= 1:
            return 0
        elif len(nums) == 2:
            # if number on right is 0
            if nums[1] == 0:
                return 0
            # else if number on left is 0 
            elif nums[0] == 0:
                return 1
            else:
                return -1
        if len(nums) >= 3:
            left = 0
            right = 0
            for item in range(1, len(nums)):
                right += nums[item]
            if left == right:
                return 0
        

        # we start at index 1 which is the second item
        # give left side and right side their respective values
        left = nums[0]
        right = 0
        for item in range(2, len(nums)):
            right += nums[item]
        if left == right:
            return 1
        else:
            while left != right:
                for items in range(2, len(nums)):
                    # add the next item to left side
                    left += nums[items - 1]
                    # subtract the first item inside rights sum
                    right -= nums[items]
                    if left == right:
                        return items
                return -1
        return -1
                      

# Begin Test
list_nums = [-1,-1,1,0,-1,0]
my_solution = Solution()
print(my_solution.pivotIndex(list_nums))
# End test