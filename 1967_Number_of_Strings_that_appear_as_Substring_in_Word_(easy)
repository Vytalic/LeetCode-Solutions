# Completed in 10 mins on 5/17/2023.
"""
Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.

A substring is a contiguous sequence of characters within a string.
"""


class Solution:
    def numOfStrings(self, patterns: list[str], word: str) -> int:
        match = 0
        for item in range(0, len(patterns)):
            if len(patterns[item]) > len(word):
                pass
            elif patterns[item] in word:
                match += 1
        return match
    
    
# Begin Test
patterns = ["abc", "ab", "a"]
my_solution = Solution()
print(my_solution.numOfStrings(patterns, "ac"))
# End Test

# Runs Faster (below)
# return sum(p in word for p in patterns)