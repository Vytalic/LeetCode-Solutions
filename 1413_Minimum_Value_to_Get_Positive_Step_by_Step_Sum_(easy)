# Completed in 30 mins on 5/26/2023
"""
Given an array of integers nums, you start with an initial positive value startValue.

In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).

Return the minimum positive value of startValue such that the step by step sum is never less than 1.
"""


from typing import List




class Solution:
    def minStartValue(self, nums: List[int]) -> int:
        starting_value = 1
        total = 0
        while total == 0:
            total = starting_value + nums[0]
            if total >= 1:
                for index in range(1, len(nums)):
                    total += nums[index]
                    if total < 1:
                        total = 0
                        starting_value += 1
                        break
                    elif index == len(nums) - 1:
                        return starting_value
            else:
                total = 0
                starting_value += 1


# Begin Test
nums = [-3,6,2,5,8,6]
my_solution = Solution()
print(my_solution.minStartValue(nums))
# End Test            
        
    


# Notes (editorial solution below)
# class Solution:
#     def minStartValue(self, nums: List[int]) -> int:
#         # We use "total" for current step-by-step total, "min_val" for minimum 
#         # step-by-step total among all sums. Since we always start with 
#         # startValue = 0, therefore the initial current step-by-step total is 0, 
#         # thus we set "total" and "min_val" be 0. 
#         min_val = 0
#         total = 0

#         # Iterate over the array and get the minimum step-by-step total.
#         for num in nums:
#             total += num
#             min_val = min(min_val, total)

#         # We have to change the minimum step-by-step total to 1, 
#         # by increasing the startValue from 0 to -min_val + 1, 
#         # which is just the minimum startValue we want.
#         return -min_val + 1